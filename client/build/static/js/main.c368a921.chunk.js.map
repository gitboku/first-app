{"version":3,"sources":["Request.js","QueryBuilder.js","Show.js","form/GenreGroupsForm.js","App.js","index.js"],"names":["myAxios","axios","create","headers","initGenreGroupsPromise","Promise","resolve","reject","post","query","then","results","data","genreGroups","catch","error","console","log","makeVariables","params","tmpVal","keys","Object","length","forEach","key","slice","Show","props","books","NoBooks","style","whiteSpace","this","GenreGroupForm","List","className","subheader","ListSubheader","component","id","map","genreGroup","booksGenreId","checked","isChecked","GenreGroup","genres","genre","Genre","onClick","Checkbox","edge","onChange","inputProps","genreGroupStyles","makeStyles","theme","root","heading","fontSize","typography","pxToRem","flexShrink","secondaryHeading","color","palette","text","secondary","list","backgroundColor","background","paper","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","title","start","indexOf","end","lastIndexOf","substring","shapeTitle","booksGenreName","ExpansionPanelDetails","children","ListItem","ListItemText","primary","ListItemSecondaryAction","addCheckedField","App","state","hasError","pageFrom","pageTo","usedGenres","result","setState","values","handleChangeTitleField","handleChange","bind","handleChangePageFromField","handleChangePageToField","handleChangeToggleGenre","handleChangeToggle","handleCheckGenre","handleCheck","allGenreGroups","allTrueGenres","push","isUseGenres","getCheckedGenreIds","tmpStr","toString","replace","pageNum","defaultValue","parseInt","checkedGenreId","getCheckedGenreIdsForQuery","newBooks","requestBooks","fields","variables","getTitle","pageNumFrom","getPageNum","pageNumTo","updateBooks","event","stateName","target","name","value","nowState","clickedBooksGenreId","newGenreGroups","startsWith","onSubmit","handleSearchBooks","TextField","label","maxLength","type","FormControlLabel","control","Switch","Collapse","in","Button","variant","size","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c368a921.chunk.js","sourcesContent":["import axios from 'axios';\n\n// 開発中はここを'http://localhost:3001/graphql'に合わせる\nconst API_ENDPOINT = 'http://localhost:3001/graphql';\nconst QUERY_FOR_GENGE = \"query { genreGroups { id booksGenreId booksGenreName genres { booksGenreId booksGenreName }}}\";\n\nconst myAxios = axios.create({\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport const requestBooks = (params) => {\n  myAxios\n  .post(API_ENDPOINT, {query: params})\n  .then((results) => {\n    return results.data.data.books;\n  },\n  )\n  .catch((error) => {\n    console.log(error);\n  });\n}\n\nexport const initGenreGroupsPromise = () => {\n  return  new Promise((resolve, reject) => {\n    myAxios\n    .post(API_ENDPOINT, {\n      query: QUERY_FOR_GENGE\n    })\n    .then((results) => {\n      resolve(results.data.data.genreGroups);\n    })\n    .catch((error) => {\n      console.log(error);\n      reject([]);\n    });\n  });\n}","export const booksQuery = (params) => {\n  return `\n    query { \n      books(${makeVariables(params.variables)}) {\n        ${params.fields.toString()}\n      }\n    }`\n}\n\nconst makeVariables = (params) => {\n  let tmpVal = ''\n  const keys = Object.keys(params)\n  if (keys.length === 0) {\n    return tmpVal\n  }\n  keys.forEach(key => {\n    tmpVal += `${key}: ${params[key]},`\n  })\n  return tmpVal.slice(0, -1)\n}","import React from 'react';\n\nexport default function Show(props) {\n  console.log(props.books)\n  const booksNum = props.books == null ? 0 : Object.keys(props.books).length;\n  if (booksNum === 0) {\n    return <NoBooks/>\n  } else {\n    return (\n      <div style={{whiteSpace: 'pre-line'}}>\n        <ul>{this.props.books}</ul>\n      </div>\n    );\n  }\n}\n\nfunction NoBooks(props) {\n  return <h1>書籍がありません。</h1>\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { ExpansionPanel, Typography, ExpansionPanelDetails, ListItemSecondaryAction, ListSubheader } from '@material-ui/core';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport '../css/form/GenreGroupsForm.css';\n\n/**\n * genreGroups の例\n *  [\n *    0: [\n *      id: 1,\n *      booksGenreId: \"005401\",\n *      booksGenreName: \"Travel（旅行）\",\n *      isChecked: false,\n *      genres: [\n *        （略）\n *      ]\n *    ],\n *    1: [] ...\n *  ]\n */\nexport default function GenreGroupForm(props) {\n  let genreGroups = props.genreGroups;\n  \n  let renderGenre = (genres) => {\n    return genres.map((genre) => {\n      let booksGenreId = genre.booksGenreId;\n      let checked = genre.isChecked;\n      return (\n        <Genre\n          id={booksGenreId}\n          key={booksGenreId}\n          genre={genre}\n          checked={checked}\n          onClick={() => props.onClick(booksGenreId, checked)}\n        />\n      );\n    });\n  }\n\n  return (\n    <List\n     className=\"GenreGroup\"\n     key=\"genre-groups-list\"\n     subheader={\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n         ジャンル\n        </ListSubheader>\n     }\n    >\n      {genreGroups.map((genreGroup) => {\n        let booksGenreId = genreGroup.booksGenreId;\n        let checked = genreGroup.isChecked;\n        return (\n          <div className='genre-group-container'>\n            <GenreGroup\n              id={booksGenreId}\n              key={booksGenreId}\n              genreGroup={genreGroup}\n            >\n              {renderGenre(genreGroup.genres)}\n            </GenreGroup>\n            <Checkbox\n              edge=\"end\"\n              onChange={() => props.onClick(booksGenreId, checked)}\n              checked={props.checked}\n              className='genre-group-checkbox'\n              inputProps={{\n                'aria-labelledby': booksGenreId\n              }}\n            />\n          </div>\n        );\n      })}\n    </List>\n  );\n}\n\nconst genreGroupStyles = makeStyles(theme => ({\n  root: {\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  list: {\n    backgroundColor: theme.palette.background.paper,\n  }\n}));\n\n/**\n * GenreGroup の例\n *  [\n *    id: 1,\n *    booksGenreName: \"Travel（旅行）\",\n *    isChecked: false,\n *    genres: [\n *      0: [\n *        booksGenreId: \"005409001\",\n *        booksGenreName: \"Transportation\",\n *        isChecked: false,\n *      ],\n *      1: ...\n *    ]\n *  ]\n */\nfunction GenreGroup(props) {\n  const classes = genreGroupStyles();\n  const id = props.id;\n\n  let shapeTitle = (title) => {\n    let start = title.indexOf('（');\n    let end = title.lastIndexOf('）');\n    if (start === -1 || end === -1) {\n      return title;\n    }\n    return title.substring(start + 1, end);\n  }\n\n  return (\n    <ExpansionPanel id={`genre-group-${id}`} className='genre-group-panel'>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id={`panel1a-header-${id}`}\n      >\n        <Typography className={classes.heading}>{shapeTitle(props.genreGroup.booksGenreName)}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <List className={classes.list}>\n          {props.children}\n        </List>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\n\n/**\n * Genre の例\n *  [\n *    booksGenreId\"005409001\",\n *    booksGenreName: \"Transportation\",\n *    isChecked: false,\n *  ]\n */\nfunction Genre(props) {\n  const id = props.id;\n\n  return (\n    <ListItem key={id}>\n      <ListItemText\n       id={`genre${id}`}\n       primary={props.genre.booksGenreName}\n      />\n      <ListItemSecondaryAction>\n        <Checkbox\n          edge=\"end\"\n          onChange={props.onClick}\n          checked={props.checked}\n          inputProps={{\n            'aria-labelledby': id\n          }}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n","import React, { Component } from 'react';\nimport './css/App.css';\nimport { requestBooks, initGenreGroupsPromise } from './Request';\nimport { booksQuery } from './QueryBuilder';\nimport Show from './Show';\nimport GenreGroupForm from './form/GenreGroupsForm';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport 'typeface-roboto';\nimport { Switch, Collapse } from '@material-ui/core';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      books: [],\n      title: '',\n      pageFrom: '',\n      pageTo: '',\n      genreGroups: [],\n      usedGenres: false,\n    };\n\n    initGenreGroupsPromise()\n      .then((result) => {\n        this.setState({genreGroups: addCheckedField(Object.values(result))});\n      })\n      .catch((error) => {\n        console.log(\"error occured = \" + error);\n      });\n\n    this.handleChangeTitleField = this.handleChange.bind(this);\n    this.handleChangePageFromField = this.handleChange.bind(this);\n    this.handleChangePageToField = this.handleChange.bind(this);\n    this.handleChangeToggleGenre = this.handleChangeToggle.bind(this);\n    this.handleCheckGenre = this.handleCheck.bind(this);\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  // チェックされているGenreのbooksGenreIdを配列で返す\n  getCheckedGenreIds(genreGroups) {\n    let allGenreGroups = genreGroups.map(genreGroup => genreGroup['genres'])\n    let allTrueGenres = [];\n    allGenreGroups.forEach((genreGroup) => {\n      genreGroup.forEach((genre) => {\n        if (genre.isChecked === true) {\n          allTrueGenres.push(genre.booksGenreId);\n        }\n      })\n    })\n    return allTrueGenres;\n  }\n\n  // [\"value1\", \"value2\"]という形の文字列にする必要がある。\n  getCheckedGenreIdsForQuery(genreGroups, isUseGenres) {\n    let allTrueGenres = this.getCheckedGenreIds(genreGroups);\n    if (isUseGenres === false || allTrueGenres === []) {\n      return \"[]\";\n    }\n    let tmpStr = allTrueGenres.toString().replace(/,/g, '\",\"');\n    return `[\"${tmpStr}\"]`;\n  }\n\n  getPageNum(pageNum, defaultValue = 0) {\n    if (pageNum === null || pageNum === '') {\n      return defaultValue;\n    } else {\n      return parseInt(pageNum, 10)\n    }\n  }\n\n  getTitle(title) {\n    return title === '' ? `\"\"` : title\n  }\n\n  handleSearchBooks() {\n    let checkedGenreId = this.getCheckedGenreIdsForQuery(this.state.genreGroups, this.state.usedGenres);\n    const requestParams = booksQuery({\n      fields: ['title'],\n      variables: {\n        title: this.getTitle(this.state.title),\n        booksGenreId: checkedGenreId,\n        pageNumFrom: this.getPageNum(this.state.pageFrom, 0),\n        pageNumTo: this.getPageNum(this.state.pageTo, 9999)\n      }\n    })\n    let newBooks = requestBooks(requestParams);\n    this.updateBooks(newBooks);\n  }\n\n  handleChange(event) {\n    let stateName = event.target.name;\n    this.setState({[stateName]: event.target.value});\n  }\n\n  handleChangeToggle(event) {\n    let nowState = this.state.usedGenres;\n    this.setState({usedGenres: !nowState});\n  }\n\n  handleCheck(clickedBooksGenreId, isChecked) {\n    let newGenreGroups = this.state.genreGroups\n    newGenreGroups.forEach(genreGroup => {\n      if (genreGroup['booksGenreId'].startsWith(clickedBooksGenreId)) {\n        genreGroup['isChecked'] = !isChecked;\n      }\n      genreGroup['genres'].forEach(genre => {\n        if (genre['booksGenreId'].startsWith(clickedBooksGenreId)) {\n          genre['isChecked'] = !isChecked;\n        }\n      });\n    });\n    this.setState({ genreGroups: newGenreGroups });\n  }\n\n  updateBooks(newBooks) {\n    this.setState({books: newBooks});\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>洋書おすすめ検索</h2>\n        </div>\n\n        <form onSubmit={this.handleSearchBooks} className={\"books-search-form\"}>\n          <TextField\n            id='title'\n            name='title'\n            label='タイトル'\n            // onChange={this.handleChangeTitleField}\n            onChange={this.handleChangeTitleField}\n            inputProps={{ maxLength: 20 }}\n          />\n          <TextField\n            id='page-from'\n            name='pageFrom'\n            label='最小ページ数'\n            type='number'\n            onChange={this.handleChangePageFromField}\n          />\n          <TextField\n            id='page-to'\n            name='pageTo'\n            label='最大ページ数'\n            type='number'\n            onChange={this.handleChangePageToField}\n          />\n\n          <FormControlLabel\n            control={\n              <Switch\n                checked={this.state.usedGenres}\n                onChange={this.handleChangeToggleGenre}\n                color=\"secondary\"\n              />\n            }\n            label=\"ジャンルを使用する\"\n          />\n          <Collapse in={this.state.usedGenres}>\n            <GenreGroupForm\n              genreGroups={this.state.genreGroups}\n              onClick={this.handleCheckGenre}\n            />\n          </Collapse>\n          <Button\n            variant='contained'\n            color='primary'\n            size='large'\n            onClick={() => this.handleSearchBooks()}\n          >\n            検索\n          </Button>\n        </form>\n        \n        <Show \n          books={this.state.books}\n        />\n      </div>\n    );\n  }\n}\n\nfunction addCheckedField(genreGroups) {\n  genreGroups.forEach(genreGroup => {\n    genreGroup['isChecked'] = false\n    genreGroup['genres'].forEach(genre => {\n      genre['isChecked'] = false;\n    });\n  });\n  return genreGroups;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}